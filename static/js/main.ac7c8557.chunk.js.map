{"version":3,"sources":["logo.svg","components/contacts.js","App.js","components/Users.js","components/Contact.js","serviceWorker.js","index.js"],"names":["module","exports","Contacts","this","props","contacts","map","contact","class","name","email","company","catchPhrase","React","Component","Button","state","clicked","handleOnClick","updateValue","letter","setState","onClick","disabled","Conta","id","type","placeholder","Bodyes","App","isToggleOn","fetch","then","res","json","data","catch","console","log","data-toggle","data-placement","title","Users","Contact","Boolean","window","location","hostname","match","Barra","href","data-target","aria-controls","aria-expanded","aria-label","to","routing","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ac7c8557.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// src/components/contacts.js\r\n\r\nimport React from 'react'\r\n\r\nclass Contacts extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <center><h1>Contact List</h1></center>\r\n        \r\n        {this.props.contacts.map((contact) => (\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n              <h5 class=\"card-title\">{contact.name}</h5>\r\n              <h6 class=\"card-subtitle mb-2 text-muted\">{contact.email}</h6>\r\n              <p class=\"card-text\">{contact.company.catchPhrase}</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )}\r\n  };\r\n\r\n\r\nexport default Contacts","import React from 'react';\nimport logo from './logo.svg';\nimport Contacts from './components/contacts';\n\nimport './App.css';\n\nclass Button extends React.Component {\n  state = {\n    clicked: false,\n  }\n\n  handleOnClick = () => {\n    if (!this.state.clicked) {\n      this.props.updateValue(this.props.letter)\n      this.setState({\n        clicked: true,\n      })\n    }\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleOnClick} disabled={this.state.clicked}>\n        {this.props.letter}\n      </button>\n    )\n  }\n}\n\nclass Btt extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      isToggleOn: true,\n      contacts:this.props.contacts\n    };\n    \n    // Este enlace es necesario para hacer que `this` funcione en el callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn\n    }));\n    \n\n        \n    \n  }\n  render() {\n    return (\n\n      <button \n        type=\"button\" \n        class=\"btn btn-secondary\" \n        data-toggle=\"tooltip\" \n        data-placement=\"top\" \n        title=\"Tooltip on top\"\n        onClick={this.handleClick}>\n          {this.state.isToggleOn ? 'ON' : 'OFF'}\n      </button>\n \n\n    )\n  }\n}\n\nclass Head extends React.Component {\n  render() {\n    return (\n      <div class=\"title\">\n        <h1>Ingreso de Contadores</h1>\n      </div>\n    )\n  }\n}\nclass Bottom extends React.Component {\n  render() {\n    return (\n\n      <h1>Dimacofi S.A</h1>\n    )\n  }\n}\n\nclass Conta extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.id,\n      name: this.props.name\n    };\n  }\n\n  render() {\n    return (\n\n      <input class=\"ingreso\" type=\"text\" id={this.state.id} name={this.state.name} placeholder={this.state.name} />\n\n\n    )\n  }\n}\n\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nclass Bodyes extends React.Component {\n  render() {\n    return (\n      <span class=\"border\">\n      <div class=\"container-sm\">\n        <div >\n          <h3>LECTURA  2020</h3>\n        </div>\n        <div >\n          <h3>RUT</h3>\n          <Conta name=\"RUT\" id=\"rut\"></Conta>\n        </div>\n        <div >\n          <h3>HH</h3>\n          <Conta name=\"HH\" id=\"hh\"></Conta>\n        </div>\n        <div >\n          <h3>Contado1</h3>\n          <Conta name=\"Contador1\" id=\"count1\"></Conta>\n\n        </div>\n        <div >\n          <h3>Contado2</h3>\n          <Conta name=\"Contador2\" id=\"count2\"></Conta>\n\n        </div>\n\n        \n      </div>\n      </span>\n    )\n  }\n}\n\nclass ButtonHolder extends React.Component {\n  state = {\n    refresh: false,\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.refresh !== prevProps.refresh) {\n      this.setState(prevState => {\n        return {\n          refresh: !prevState.refresh,\n        }\n      })\n    }\n  }\n\n  createButtons = () => {\n    const contacts = this.props.contacts\n    return contacts.map(contacts => (\n      <Button contacts={contacts} updateValue={this.props.updateValue} />\n    ))\n  }\n\n  render() {\n    const refresh = this.state.refresh\n    return (\n      <div>\n        {!refresh ? this.createButtons() : null}\n        {refresh ? this.createButtons() : null}\n      </div>\n    )\n  }\n}\n\n\nclass App extends React.Component {\n \n state = {\n      isToggleOn: true,\n      contacts:[]\n    };\n    updateValue = contacts => {\n      fetch('http://jsonplaceholder.typicode.com/users')\n        .then(res => res.json())\n        .then((data) => {\n          this.setState({ contacts: data })\n        })\n        .catch(console.log)\n    }\n  render() {\n    return (\n      <div class=\"App container-fluid\">\n\n        <Bodyes />\n        <button \n        type=\"button\" \n        class=\"btn btn-secondary\" \n        data-toggle=\"tooltip\" \n        data-placement=\"top\" \n        title=\"Tooltip on top\"\n        onClick={this.updateValue}>\n          {this.state.isToggleOn ? 'ON' : 'OFF'}\n      </button>\n        <Contacts contacts={this.state.contacts} />\n      </div>\n    )\n  }\n\n  \n}\nexport default App;\n","import React from 'react'\r\nclass Users extends React.Component {\r\n  render() {\r\n    return <h1>Users</h1>\r\n  }\r\n}\r\nexport default Users","import React from 'react'\r\n\r\n\r\nclass Contact extends React.Component {\r\n  render() {\r\n    return (\r\n    <h1>Contact</h1>\r\n\r\n    );\r\n  }\r\n}\r\nexport default Contact","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport Users from './components/Users';\nimport Contact from './components/Contact';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nclass Barra extends React.Component {\n  render() {\n    return (\n      <div class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a class=\"navbar-brand\" href=\"#\">Navbar</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <ul class=\"navbar-nav mr-auto\" >\n          <li class=\"nav-item\">\n            <Link class=\"nav-link\" to=\"/\">Home</Link>\n          </li>\n          <li class=\"nav-item\">\n            <Link class=\"nav-link\" to=\"/users\">Users</Link>\n          </li>\n          <li class=\"nav-item\">\n            <Link class=\"nav-link\" to=\"/contact\">Contact</Link>\n          </li>\n        </ul>\n      </div>\n\n    );\n  }\n}\n\n\nconst routing = (\n  <Router>\n    <div class=\"container\">\n      <div class=\"row\">\n        <Barra />\n        <Route path=\"/\" component={App} />\n        <Route path=\"/users\" component={Users} />\n         <Route path=\"/contact\" component={Contact} />\n      </div>\n    </div>\n    \n\n\n\n  </Router >\n)\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}